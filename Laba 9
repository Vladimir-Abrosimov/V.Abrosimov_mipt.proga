import pygame
from random import randint
import math

cr = (255, 0, 0)
cb = (0, 0, 255)
cy = (255, 255, 0)
cg = (0, 255, 0)
cm = (255, 0, 255)
cc = (0, 255, 255)
bl = (0, 0, 0)
wh = (255, 255, 255)

pl0 = [cr, cb, cy]
pl1 = [cg, cm, cc]


class tank:
    '''
    x - x position
    y - y position
    vx - x axis speed
    vy - y axis speed
    color - color of object
    type - type, if 0 - circle,1 - rect

    xmin - position of left object border
    xmxx - position of right object border
    ymin - position of top object border
    ymxx - position of buttom object border

    r = radius of circle or half of rect side

    R - r**2
    '''

    # intialize starting variables with help of random
    def __init__(self, x, y, vx, vy, r, W, H, type):
        '''
        xm - maximum starting x possition
        ym - maximum starting y possition
        rm - maximum size of the object
        vm - maxim x,y speed of the object
        r = radius of circle or half of rect side
        '''

        self.shell_type = 2
        self.da = 0
        self.spawn = 0
        self.power = 0
        self.power_up = False
        self.W = W
        self.H = H
        self.r = r
        self.x = x
        self.y = y
        self.vx = vx
        self.vy = vy
        self.type = type
        self.a = 0
        if self.type == 0:
            self.color = pl0[randint(0, len(pl0) - 1)]
        if self.type == 1:
            self.color = pl1[randint(0, len(pl1) - 1)]
        self.R = self.r ** 2

    # calculate some useful properties of an object
    def reass(self):
        '''
        xmin - position of left object border
        xmxx - position of right object border
        ymin - position of top object border
        ymxx - position of buttom object border
        r = radius of circle or half of rect side
        R - r**2
        '''
        self.xmax = self.x + self.r
        self.xmin = self.x - self.r
        self.ymax = self.y + self.r
        self.ymin = self.y - self.r

    def Draw(self, screen, power):

        x0, y0 = self.x, self.y
        power = self.power + 30
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.r, 0)
        self.draw_gun(screen, power + 20)

    def Move(self):

        '''
        W,H - screen borders
        vm - maximum and minimum random speed
        '''
        W, H = self.W, self.H
        if 20 < (self.x + self.vx) < W - 20:
            self.x = self.x + self.vx
        self.a += self.da

    def draw_gun(self, screen, power):

        an = self.a
        pygame.draw.polygon(screen, self.color,
                            [(self.x + int(5 * math.cos(an + 1.57)), self.y - int(5 * math.sin(an + 1.57))),
                             (self.x + int(5 * math.cos(an - 1.57)), self.y - int(5 * math.sin(an - 1.57))),
                             (self.x + int(power * math.cos(an - 0.165)), self.y - int(power * math.sin(an - 0.165))),
                             (self.x + int(power * math.cos(an + 0.165)), self.y - int(power * math.sin(an + 0.165)))])
        self.color = (255, 0, 0)

cr = (255, 0, 0)
cb = (0, 0, 255)
cy = (255, 255, 0)
cg = (0, 255, 0)
cm = (255, 0, 255)
cc = (0, 255, 255)
bl = (0, 0, 0)
wh = (255, 255, 255)
pl0 = [cr, cb, cy]
pl1 = [cg, cm, cc]

class target:
    '''
    x - x position
    y - y position
    vx - x axis speed
    vy - y axis speed
    color - color of object
    type - type, if 0 - circle,1 - rect

    xmin - position of left object border
    xmxx - position of right object border
    ymin - position of top object border
    ymxx - position of buttom object border

    r = radius of circle or half of rect side

    R - r**2
    '''

    # intialize starting variables with help of random
    def __init__(self, xmin, ymin, xmax, ymax, vx, vy, r, W, H):
        '''
        xm - maximum starting x possition
        ym - maximum starting y possition
        rm - maximum size of the object
        vm - maxim x,y speed of the object
        r = radius of circle or half of rect side
        '''
        self.spawn = 0
        self.W = W
        self.H = H
        self.r = randint(r // 3, r)
        self.x = randint(xmin + 2 * self.r, xmax - 2 * self.r)
        self.y = randint(ymin + 2 * self.r, ymax - 2 * self.r)
        self.vx = randint(0, vx)
        self.vy = randint(0, vy)
        self.type = randint(0, 1)
        if self.type == 0:
            self.color = pl0[randint(0, len(pl0) - 1)]
        if self.type == 1:
            self.color = pl1[randint(0, len(pl1) - 1)]
        self.R = self.r ** 2

    # calculate some useful properties of an object
    def reass(self):
        '''
        xmin - position of left object border
        xmxx - position of right object border
        ymin - position of top object border
        ymxx - position of buttom object border
        r = radius of circle or half of rect side
        R - r**2
        '''
        self.xmax = self.x + self.r
        self.xmin = self.x - self.r
        self.ymax = self.y + self.r
        self.ymin = self.y - self.r

    def Draw(self, screen):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.r, 0)

    def Move(self):

        '''
        W,H - screen borders
        vm - maximum and minimum random speed
        '''
        W, H = self.W, self.H
        if self.xmin <= 0:
            self.vx = - self.vx
        if self.xmax >= W:
            self.vx = - self.vx
        if self.ymin <= 0:
            self.vy = - self.vy
        if self.ymax >= H:
            self.vy = - self.vy
        l = (self.x - W // 2) ** 2 + (self.y - H // 2) ** 2
        if self.type == 0 or self.type == 1:
            self.vx += 100 / l * (-self.x + W // 2)
            self.vy += 100 / l * (-self.y + H // 2)
        self.x = self.x + self.vx
        self.y = self.y + self.vy

class shell:
    '''
    x - x position
    y - y position
    vx - x axis speed
    vy - y axis speed
    color - color of object
    type - type, if 0 - circle,1 - rect

    xmin - position of left object border
    xmxx - position of right object border
    ymin - position of top object border
    ymxx - position of buttom object border

    r = radius of circle or half of rect side

    R - r**2
    '''

    # intialize starting variables with help of random
    def __init__(self, x, y, vx, vy, r, W, H, type):
        '''
        xm - maximum starting x possition
        ym - maximum starting y possition
        rm - maximum size of the object
        vm - maxim x,y speed of the object
        r = radius of circle or half of rect side
        '''
        self.W = W
        self.H = H
        self.live = 0
        self.r = r
        self.x = x
        self.y = y
        self.vx = vx / 3
        self.vy = vy / 3
        self.type = type

        if self.type == 0:
            self.color = pl0[randint(0, len(pl0) - 1)]
            self.spawn = 100
        if self.type == 1:
            self.color = pl1[randint(0, len(pl1) - 1)]
            self.spawn = 70
        if self.type == 2:
            self.color = pl1[randint(0, len(pl1) - 1)]
            self.spawn = 150
            self.vx = vx / 2
            self.vy = vy / 2
        self.R = self.r ** 2

    # calculate some useful properties of an object
    def reass(self):
        '''
        xmin - position of left object border
        xmxx - position of right object border
        ymin - position of top object border
        ymxx - position of buttom object border
        r = radius of circle or half of rect side
        R - r**2
        '''
        self.xmax = self.x + self.r
        self.xmin = self.x - self.r
        self.ymax = self.y + self.r
        self.ymin = self.y - self.r
        self.live += 1

        if self.spawn < 30 and self.type == 0:
            return True
        else:
            return False

    def Draw(self, screen):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.r, 0)

    def Move(self):

        '''
        W,H - screen borders
        vm - maximum and minimum random speed
        '''
        W, H = self.W, self.H
        k = 0.8
        l = (self.x - W // 2) ** 2 + (self.y - H // 2) ** 2
        if self.type == 0 or self.type == 1:
            self.vx += 100 / l * (-self.x + W // 2)
            self.vy += 100 / l * (-self.y + H // 2)
        if self.type == 2:
            self.vx += 100 / l * (self.x - W // 2)
            self.vy += 100 / l * (self.y - H // 2)
        if self.xmin <= 0:
            self.vx = - self.vx * k
            self.x = self.r
        if self.xmax >= W:
            self.vx = - self.vx * k
            self.x = W - self.r
        if self.ymin <= 0:
            self.vy = - self.vy * k
            self.y = self.r
        if self.ymax >= H:
            self.vy = - self.vy * k
            self.y = H - self.r
        self.x = self.x + self.vx
        self.y = self.y + self.vy

name = input('Ваше имя: ')
Number_of_objects = int(input('Число целей: '))
Size = int(input('Максимальный размер целей: '))
Speed = int(input('Маскимальная скорость целей: '))
pygame.init()
FPS = 60
screen = pygame.display.set_mode((1200, 800))

W = 1200
H = 800

targets = []
shells = []
tanks = []

#initialize all objects on screen
def init(L_target,L_tank):
    '''
    Speed - maximum object speed
    Size - maximum object size
    L - number of objects
    W,H - screen borders
    '''
    global W,H
    for i in range(L_target):
        targets.append(target(W//2,0,W,H,5,5,40,W,H))
        targets[i].reass()
    tanks.append(tank(20,H-20,0,0,20,W,H,0))
    tanks[-1].reass()

#initialize new ball after the death previous
def new_shell(x,y,vx,vy):
    '''
    Speed - maximum object speed
    W,H - screen borders
    Size - maximum object size
    '''
    global W,H
    shellf = shell.shell(x,y,vx,vy,10,W,H)
    shellf.reass()
    return shellf

#initialize new ball after the death previous
def new_target(xmin,ymin,xmax,ymax,vx,vy,r):
    '''
    Speed - maximum object speed
    W,H - screen borders
    Size - maximum object size
    '''
    global W,H
    targetf = target(xmin,ymin,xmax,ymax,vx,vy,r,W,H)
    targetf.reass()
    return targetf

#redraw and compute next position of all screen objects and draw score
def update(position,power):
    '''
    balls - list of all creen objects
    W,H - screen borders
    score - players score
    '''

    death_list = []

    for i in range(len(shells)):
        if shells[i]:
            if shells[i].spawn == 0:
                death_list.append((-1,i))
            else:
                shells[i].spawn -=1
                if shells[i].reass():
                    for j in range(5):
                        shells.append(shell(shells[i].x,shells[i].y,randint(0,10)/10*shells[i].vx,randint(0,10)/10*shells[i].vx,10,W,H,1))
                    death_list.append((-1,shells[i]))
                else:
                    shells[i].Move()
                    shells[i].Draw(screen)
        
    for i in range(len(targets)):
        if targets[i]:
            targets[i].reass()
            targets[i].Move()
            targets[i].Draw(screen)
    death_list = death_list+find()
    kill(death_list)
    tanks[0].Move()
    tanks[0].Draw(screen,tanks[0].power)

#function of killing of an object and adding score and reving
def kill(death_list):
    global W,H
    for p in death_list:
        for t in p:
            if type(t) == target:
                targets.remove(t)
                global Speed, Size
                targets.append(new_target(W//2,0,W,H,Speed,Speed,Size))
            if type(t) == shell:
                if t.live > 20:
                    shells.remove(t)
                    t = False
                else:
                    break

#function finds if player has clicked at the object or no and gets that object index
def find():
    pairs = create_pairs(targets,shells)
    pairs = pairs +create_pairs(tanks,shells)
    pairs = pairs +create_pairs(tanks,targets)
    death = []
    global score
    for p in pairs:

        if abs(p[0].x - p[1].x)<(p[0].r + p[1].r):
            if abs(p[0].y - p[1].y)<(p[0].r + p[1].r):
                if (p[0].x - p[1].x)**2 + (p[0].y - p[1].y)**2<(p[0].r + p[1].r)**2:
                    death.append(p)
    return death
#finds all posible pairs
def create_pairs(arr1,arr2):

    pairs = []
    
    for i in range(len(arr1)):
        for j in range(i,len(arr2)):
            if arr1[i] and arr2[j]:
                pairs.append((arr1[i],arr2[j]))
    return pairs

#function which starts on click and launch all other functions
def shoot(tank):
    global number_of_rounds
    number_of_rounds +=1
    k = tank.power+10
    x0,y0 = tank.x,tank.y
    find = False
    for i in range(len(shells)):
        if not shells[i]:
            shells[i] = shell(x0,y0,math.cos(tank.a)*k,-math.sin(tank.a)*k,10,W,H,tank.shell_type)
            shells[i].reass()
            find = True
            break
    if not find:
        shells.append(shell(x0,y0,math.cos(tank.a)*k,-math.sin(tank.a)*k,10,W,H,tank.shell_type))
        shells[-1].reass()

pygame.display.update()
clock = pygame.time.Clock()
finished = False
init(Number_of_objects,1)
power = 0
while not finished:
    clock.tick(FPS)
    if tanks[0].power_up:
        if tanks[0].power<33:
            tanks[0].power+=1
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_q:
                finished = True
            if event.key == pygame.K_w:
                tanks[0].da =0.05
            if event.key == pygame.K_s:
                tanks[0].da =-0.05
            if event.key == pygame.K_LSHIFT :
                if tanks[0].power<33:
                    tanks[0].power+=1
                    tanks[0].power_up = True
            if event.key == pygame.K_d:
                tanks[0].vx = 5
            if event.key == pygame.K_a:
                tanks[0].vx = -5
            if event.key == pygame.K_0:
                tanks[0].shell_type = 0
            if event.key == pygame.K_1:
                tanks[0].shell_type = 2
        if event.type == pygame.QUIT:
            finished = True
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_d:
                tanks[0].vx = 0
            if event.key == pygame.K_a:
                tanks[0].vx = 0
            if event.key == pygame.K_w:
                tanks[0].da =0
            if event.key == pygame.K_s:
                tanks[0].da =0
            if event.key == pygame.K_LSHIFT :
                if tanks[0].power != 0:
                    if tanks[0].power_up:
                        shoot(tanks[0])
                        tanks[0].power = 0
                tanks[0].power_up = False

    update(pygame.mouse.get_pos(),power)
    pygame.display.update()
    screen.fill(bl)

pygame.quit()
